import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

API_TOKEN = os.getenv("BOT_TOKEN") # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# WEBHOOK_HOST = os.getenv("WEBHOOK_HOST") # URL Render, –Ω–∞–ø—Ä–∏–º–µ—Ä https://my-tg-bot.onrender.com
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # Render –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç BotFather.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è url
if not WEBHOOK_HOST:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ Render —á–µ—Ä–µ–∑ webhook üöÄ")


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


async def on_startup(app):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(app):
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
    await bot.delete_webhook()
    await bot.session.close()


async def handle(request):
    data = await request.json()

    from aiogram import types
    update = types.Update(**data)

    # –í–ê–ñ–ù–û: –∑–∞–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π bot
    from aiogram import Bot
    Bot.set_current(bot)

    await dp.process_update(update)
    return web.Response()


def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()



